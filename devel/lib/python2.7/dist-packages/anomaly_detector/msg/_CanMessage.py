# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from anomaly_detector/CanMessage.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CanMessage(genpy.Message):
  _md5sum = "0b86246e8a1593029168cc26c2e03152"
  _type = "anomaly_detector/CanMessage"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 msgId
float64 vehicleSpeed
float64 engineSpeed
bool driverDoorOpen
bool frontPassengerDoorOpen
bool rearLeftDoorOpen
bool rearRightDoorOpen
uint64 timeStamp
"""
  __slots__ = ['msgId','vehicleSpeed','engineSpeed','driverDoorOpen','frontPassengerDoorOpen','rearLeftDoorOpen','rearRightDoorOpen','timeStamp']
  _slot_types = ['uint8','float64','float64','bool','bool','bool','bool','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       msgId,vehicleSpeed,engineSpeed,driverDoorOpen,frontPassengerDoorOpen,rearLeftDoorOpen,rearRightDoorOpen,timeStamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CanMessage, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.msgId is None:
        self.msgId = 0
      if self.vehicleSpeed is None:
        self.vehicleSpeed = 0.
      if self.engineSpeed is None:
        self.engineSpeed = 0.
      if self.driverDoorOpen is None:
        self.driverDoorOpen = False
      if self.frontPassengerDoorOpen is None:
        self.frontPassengerDoorOpen = False
      if self.rearLeftDoorOpen is None:
        self.rearLeftDoorOpen = False
      if self.rearRightDoorOpen is None:
        self.rearRightDoorOpen = False
      if self.timeStamp is None:
        self.timeStamp = 0
    else:
      self.msgId = 0
      self.vehicleSpeed = 0.
      self.engineSpeed = 0.
      self.driverDoorOpen = False
      self.frontPassengerDoorOpen = False
      self.rearLeftDoorOpen = False
      self.rearRightDoorOpen = False
      self.timeStamp = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2d4BQ().pack(_x.msgId, _x.vehicleSpeed, _x.engineSpeed, _x.driverDoorOpen, _x.frontPassengerDoorOpen, _x.rearLeftDoorOpen, _x.rearRightDoorOpen, _x.timeStamp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.msgId, _x.vehicleSpeed, _x.engineSpeed, _x.driverDoorOpen, _x.frontPassengerDoorOpen, _x.rearLeftDoorOpen, _x.rearRightDoorOpen, _x.timeStamp,) = _get_struct_B2d4BQ().unpack(str[start:end])
      self.driverDoorOpen = bool(self.driverDoorOpen)
      self.frontPassengerDoorOpen = bool(self.frontPassengerDoorOpen)
      self.rearLeftDoorOpen = bool(self.rearLeftDoorOpen)
      self.rearRightDoorOpen = bool(self.rearRightDoorOpen)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2d4BQ().pack(_x.msgId, _x.vehicleSpeed, _x.engineSpeed, _x.driverDoorOpen, _x.frontPassengerDoorOpen, _x.rearLeftDoorOpen, _x.rearRightDoorOpen, _x.timeStamp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.msgId, _x.vehicleSpeed, _x.engineSpeed, _x.driverDoorOpen, _x.frontPassengerDoorOpen, _x.rearLeftDoorOpen, _x.rearRightDoorOpen, _x.timeStamp,) = _get_struct_B2d4BQ().unpack(str[start:end])
      self.driverDoorOpen = bool(self.driverDoorOpen)
      self.frontPassengerDoorOpen = bool(self.frontPassengerDoorOpen)
      self.rearLeftDoorOpen = bool(self.rearLeftDoorOpen)
      self.rearRightDoorOpen = bool(self.rearRightDoorOpen)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2d4BQ = None
def _get_struct_B2d4BQ():
    global _struct_B2d4BQ
    if _struct_B2d4BQ is None:
        _struct_B2d4BQ = struct.Struct("<B2d4BQ")
    return _struct_B2d4BQ
