// Generated by gencpp from file anomaly_detector/CanMessage.msg
// DO NOT EDIT!


#ifndef ANOMALY_DETECTOR_MESSAGE_CANMESSAGE_H
#define ANOMALY_DETECTOR_MESSAGE_CANMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace anomaly_detector
{
template <class ContainerAllocator>
struct CanMessage_
{
  typedef CanMessage_<ContainerAllocator> Type;

  CanMessage_()
    : msgId(0)
    , vehicleSpeed(0.0)
    , engineSpeed(0.0)
    , driverDoorOpen(false)
    , frontPassengerDoorOpen(false)
    , rearLeftDoorOpen(false)
    , rearRightDoorOpen(false)
    , timeStamp(0)  {
    }
  CanMessage_(const ContainerAllocator& _alloc)
    : msgId(0)
    , vehicleSpeed(0.0)
    , engineSpeed(0.0)
    , driverDoorOpen(false)
    , frontPassengerDoorOpen(false)
    , rearLeftDoorOpen(false)
    , rearRightDoorOpen(false)
    , timeStamp(0)  {
  (void)_alloc;
    }



   typedef uint8_t _msgId_type;
  _msgId_type msgId;

   typedef double _vehicleSpeed_type;
  _vehicleSpeed_type vehicleSpeed;

   typedef double _engineSpeed_type;
  _engineSpeed_type engineSpeed;

   typedef uint8_t _driverDoorOpen_type;
  _driverDoorOpen_type driverDoorOpen;

   typedef uint8_t _frontPassengerDoorOpen_type;
  _frontPassengerDoorOpen_type frontPassengerDoorOpen;

   typedef uint8_t _rearLeftDoorOpen_type;
  _rearLeftDoorOpen_type rearLeftDoorOpen;

   typedef uint8_t _rearRightDoorOpen_type;
  _rearRightDoorOpen_type rearRightDoorOpen;

   typedef uint64_t _timeStamp_type;
  _timeStamp_type timeStamp;





  typedef boost::shared_ptr< ::anomaly_detector::CanMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anomaly_detector::CanMessage_<ContainerAllocator> const> ConstPtr;

}; // struct CanMessage_

typedef ::anomaly_detector::CanMessage_<std::allocator<void> > CanMessage;

typedef boost::shared_ptr< ::anomaly_detector::CanMessage > CanMessagePtr;
typedef boost::shared_ptr< ::anomaly_detector::CanMessage const> CanMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anomaly_detector::CanMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anomaly_detector::CanMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace anomaly_detector

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'anomaly_detector': ['/home/pankaj/bmw_ws/src/anomaly_detector/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::anomaly_detector::CanMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anomaly_detector::CanMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anomaly_detector::CanMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anomaly_detector::CanMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anomaly_detector::CanMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anomaly_detector::CanMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anomaly_detector::CanMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b86246e8a1593029168cc26c2e03152";
  }

  static const char* value(const ::anomaly_detector::CanMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b86246e8a159302ULL;
  static const uint64_t static_value2 = 0x9168cc26c2e03152ULL;
};

template<class ContainerAllocator>
struct DataType< ::anomaly_detector::CanMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anomaly_detector/CanMessage";
  }

  static const char* value(const ::anomaly_detector::CanMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anomaly_detector::CanMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 msgId\n\
float64 vehicleSpeed\n\
float64 engineSpeed\n\
bool driverDoorOpen\n\
bool frontPassengerDoorOpen\n\
bool rearLeftDoorOpen\n\
bool rearRightDoorOpen\n\
uint64 timeStamp\n\
";
  }

  static const char* value(const ::anomaly_detector::CanMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anomaly_detector::CanMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msgId);
      stream.next(m.vehicleSpeed);
      stream.next(m.engineSpeed);
      stream.next(m.driverDoorOpen);
      stream.next(m.frontPassengerDoorOpen);
      stream.next(m.rearLeftDoorOpen);
      stream.next(m.rearRightDoorOpen);
      stream.next(m.timeStamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CanMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anomaly_detector::CanMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anomaly_detector::CanMessage_<ContainerAllocator>& v)
  {
    s << indent << "msgId: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.msgId);
    s << indent << "vehicleSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.vehicleSpeed);
    s << indent << "engineSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.engineSpeed);
    s << indent << "driverDoorOpen: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.driverDoorOpen);
    s << indent << "frontPassengerDoorOpen: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.frontPassengerDoorOpen);
    s << indent << "rearLeftDoorOpen: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rearLeftDoorOpen);
    s << indent << "rearRightDoorOpen: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rearRightDoorOpen);
    s << indent << "timeStamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timeStamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANOMALY_DETECTOR_MESSAGE_CANMESSAGE_H
